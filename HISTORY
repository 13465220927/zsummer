HISTORY for ZSUMMER
2010.8.29

第一个IOCP test完成.

2010.9.29

封装windows下的线程接口 IOCP采用一个完成端口绑定多个工作线程的方式, 解决关闭时的资源安全回收问题.

2010.12.07

上层接口设计重新设计, 功能测试通过, zsummer 1.0结束. 缺点: 不跨平台, 资源回收不优雅, 用锁太多, 运行不够稳定.

2011.03.15

跨平台的EPOLL/IOCP封装开始

2011.03.19

实现跨平台的互斥锁, 信号量, 线程类封装. 实现跨平台的时间获取 休眠 时间转换等utility小函数封装

2011.03.23

最上层的网络封装接口雏形完成, 一个IOServer对应一个监听端口的高层次封装. 日志纪录类封装完成, 一些文件操作,split字符串处理, 内存队列等utility小函数封装. 规范命名.

2011.04.01

EPOLL ET模式的核心的封装完成, IOCP移植到新的接口下面, CLog尝试采用环形队列实现已提高性能.

2011.04.09

功能测试通过 zsummer2.0结束. 缺点: 因核心是多线程模式, 每个socket要1~2把锁去控制资源安全问题, 上层使用要注意底层回调时候的多线程安全问题. 接口不够灵活 每个IOServer只能默认绑定且只能绑定一个监听端口.

2012.04.21

3.0 build. 采用proactor模型设计, 单IOServer绑定单线程 通过提供的上层借口让业务层去根据不同强度的网络环境设计对应的使用模式. IOServer与 socekt, connect, accept, 定时器等低耦合设计, 可以随意挂任何数量上去.

2012.05.07

增加系统CPU 内存状态的监控模块.

2012.05.08

增加windows下的minidump模块.

2012.05.28

IOCP实现.

2012.06.06

EPOLL实现, 摒弃ET模式 采用LT.

2012.06.08

使用boost asio编写压力测试客户端.

2012.07.18

多种环境下的压力测试完成. vmware下EPOLL 单个连接每秒200字节数据 2.3万连接时候仅占27%CPU IOCP 单个连接每秒200字节数据 3万并发占用CPU 55% 单个连接10秒一个数据下均可轻松上100K并发 CPU占用5%左右 性能非常高. 3.0版本结束.

2012.12.12

4.0build 3.0的性能仍然不够好 有很多提升空间 细节部分仍然不十分优雅. 日志输出功能太弱.

2012.12.24

2013.02.24

日志记录库在进行加强后开源已于24日开源 开源版本号0.9.0(目前已经迭代到1.1.1)

2013.03.07

IOCP整理了一下.

2013.03.15

EPOLL的IOServer摒弃epoll超时方式通知 改用实时的socket通道实现消息通知.